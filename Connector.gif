using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;

namespace DAL.Connect
{
    public class Connector
    {
        #region Objects And Variables

        private SqlCommand Command = null;
        private SqlDataAdapter Adapter = null;
        private SqlConnection Connection = null;
        private SqlTransaction Transaction = null;
        private IDbDataParameter[] Parameter = null;

        #endregion Objects And Variables

        #region Constructor

        public Connector(string connectionString)
        {
            this.Connection = new SqlConnection(connectionString);
        }

        #endregion Constructor

        #region Open

        public void Open()
        {
            if (Connection.State != ConnectionState.Open)
                this.Connection.Open();
        }

        #endregion Open

        #region Close

        public void Close()
        {
            this.Connection.Close();
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;
            this.Transaction = null;
        }

        #endregion Close

        #region ExcuteDataSet

        public DataSet ExcuteDataSet(string commandQuery)
        {
            DataSet Ds = new DataSet();

            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                    Command.Parameters.Add(Item);
            Command.CommandTimeout = 150;
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Adapter.Fill(Ds);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return Ds;
        }

        #endregion ExcuteDataSet

        #region ExecuteList

        public List<T> ExecuteList<T>(string commandQuery)
        {
            DataTable Dt = new DataTable();

            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                    Command.Parameters.Add(Item);
            Command.CommandTimeout = 150;
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Adapter.Fill(Dt);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return CreateList<T>(Dt);
        }

        public static List<T> CreateList<T>(DataTable table)
        {
            if (table == null)
                return null;

            List<DataRow> rows = new List<DataRow>();
            foreach (DataRow row in table.Rows)
                rows.Add(row);

            return CreateList<T>(rows);
        }

        public static List<T> CreateList<T>(List<DataRow> rows)
        {
            List<T> rt = null;
            if (rows != null)
            {
                rt = new List<T>();
                foreach (DataRow row in rows)
                {
                    T item = CreateItem<T>(row);
                    rt.Add(item);
                }
            }
            return rt;
        }

        public static T CreateItem<T>(DataRow row)
        {
            string columnName;
            T rt = default(T);
            if (row != null)
            {
                rt = Activator.CreateInstance<T>();
                PropertyInfo prop = null;
                object value = null;
                foreach (DataColumn column in row.Table.Columns)
                {
                    columnName = column.ColumnName;

                    //Get property with same columnName
                    prop = rt.GetType().GetProperty(columnName);
                    try
                    {
                        //Get value for the column
                        value = (row[columnName].GetType() == typeof(DBNull)) ? null : row[columnName];

                        //Set property value
                        prop.SetValue(rt, value, null);
                    }
                    catch
                    {
                        throw;

                        //Catch whatever here
                    }
                }
            }
            return rt;
        }

        #endregion ExecuteList

        #region ExcuteNonQuery

        public void ExcuteNonQuery(string commandQuery)
        {
            try
            {
                if (Connection.State != ConnectionState.Open)
                    Connection.Open();
                Command = new SqlCommand(commandQuery, Connection);
                if (Transaction != null)
                    Command.Transaction = Transaction;
                if (Parameter != null)
                    foreach (IDbDataParameter Item in Parameter)
                    {
                        if (null == Item.Value)
                        {
                            Item.Value = DBNull.Value;
                        }
                        Command.Parameters.Add(Item);
                    }
                Command.CommandTimeout = 150;
                Command.ExecuteNonQuery();
                this.Command = null;
                this.Adapter = null;
                this.Parameter = null;
            }
            catch (Exception e)
            {
                throw (e);
            }
        }

        #endregion ExcuteNonQuery

        #region ExcuteDataSet

        public DataSet ExcuteDataSet(string commandQuery, Int32 timeOut)
        {
            DataSet Ds = new DataSet();

            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                    Command.Parameters.Add(Item);
            Command.CommandTimeout = timeOut;
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Adapter.Fill(Ds);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return Ds;
        }

        #endregion ExcuteDataSet

        #region ExecuteDataTable

        public DataTable ExecuteDataTable(string commandQuery, Int32 timeOut)
        {
            DataTable Dt = new DataTable();

            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                {
                    if (null == Item.Value)
                    {
                        Item.Value = DBNull.Value;
                    }
                    Command.Parameters.Add(Item);
                }
            Command.CommandTimeout = timeOut;
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Adapter.Fill(Dt);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return Dt;
        }

        public DataTable ExecuteStoredProcedure(string commandQuery, Int32 timeOut)
        {
            DataTable Dt = new DataTable();

            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            Command.CommandType = CommandType.StoredProcedure;
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                {
                    if (null == Item.Value)
                    {
                        Item.Value = DBNull.Value;
                    }
                    Command.Parameters.Add(Item);
                }
            Command.CommandTimeout = timeOut;
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Adapter.Fill(Dt);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return Dt;
        }

        #endregion ExecuteDataTable

        #region ExcuteNonQuery

        public void ExcuteNonQuery(string commandQuery, Int32 timeOut)
        {
            if (Connection.State != ConnectionState.Open)
                Connection.Open();
            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                    Command.Parameters.Add(Item);
            Command.CommandTimeout = 1200;
            Command.ExecuteNonQuery();
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;
        }

        #endregion ExcuteNonQuery

        #region BeginTransaction

        public void BeginTransaction()
        {
            this.Transaction = Connection.BeginTransaction();
            //this.Connection.BeginTransaction();
        }

        #endregion BeginTransaction

        #region CommitTransaction

        public void CommitTransaction()
        {
            if (Transaction != null)
                this.Transaction.Commit();
            this.Transaction = null;
        }

        #endregion CommitTransaction

        #region RollBackTransaction

        public void RollBackTransaction()
        {
            if (Transaction != null)
                this.Transaction.Rollback();
            this.Transaction = null;
        }

        #endregion RollBackTransaction

        #region CreateParameter

        public void CreateParameter(Int32 parameterLength)
        {
            Parameter = new IDbDataParameter[parameterLength];
            for (Int32 i = 0; i < parameterLength; i++)
                Parameter[i] = new SqlParameter();
        }

        #endregion CreateParameter

        #region AddParameter

        public void AddParameter(Int32 index, string parameterName, object objValue)
        {
            if (index < Parameter.Length)
            {
                Parameter[index].ParameterName = parameterName;
                Parameter[index].Value = objValue;
            }
        }

        #endregion AddParameter

        #region ExecuteData

        public DataTable ExecuteData(string commandQuery)
        {
            DataTable Dt = new DataTable();

            Command = new SqlCommand(commandQuery, Connection);
            if (Transaction != null)
                Command.Transaction = Transaction;
            if (Parameter != null)
                foreach (IDbDataParameter Item in Parameter)
                    Command.Parameters.Add(Item);
            Command.CommandTimeout = 1200;
            Adapter = new SqlDataAdapter(Command);
            Adapter.Fill(Dt);
            this.Command = null;
            this.Adapter = null;
            this.Parameter = null;

            return Dt;
        }

        #endregion ExecuteData
    }
}