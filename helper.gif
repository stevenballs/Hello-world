$(document).ready(function () {
    $("#predictive_id").val(GetQueryStringParams('predictive_id'))
});

var secTalktime = 0;
var control_host = '192.168.0.37';
function check_predictive_status(_fncName, _sysMisscallStatus, _userStatus, _strMisscallStatus, _talkTime) {
    if ($("#predictive_id").val() != "" && $("#predictive_id").val() != "0") {
        $("#fncName").val(_fncName);
        $("#Fm_Predictive_Control").attr("action", "http://" + control_host + "/voip/predictive/command_2.php?Command=CheckCallStatus&id=" + $("#predictive_id").val() + "&cntParent=2&sysStatus=" + _sysMisscallStatus + "&userStatus=" + _userStatus + "&strStatus=" + encodeURI(_strMisscallStatus) + "&talkTime=" + _talkTime + "");
        $("#Fm_Predictive_Control").submit();
    } else {
        eval(_fncName);
    }
}

function check_talk_time(_fncName) {
    /*
    ใน _fncName ต้องมี <TT> เพื่อรับค่า
    */
    $("#fncName").val(_fncName);
    $("#Fm_Predictive_Control").attr("action", "http://" + control_host + "/voip/predictive/command_2.php?Command=CheckTalkTime&id=" + $("#predictive_id").val() + "&operation_id=" + $("#operation_id").val() + "&cntParent=2");
    $("#Fm_Predictive_Control").submit();
}


var flagPDebug = false;
function show_predictive_debug() {
    if (flagPDebug == false) {
        flagPDebug = true;
        $("#dv_Predictive_Control").show();
    }
    else {
        flagPDebug = false;
        $("#dv_Predictive_Control").hide();
    }
}

function AjaxWebService(webMethod, data) {
    var _tmp;
    $.ajax({
        async: false
        , type: "POST"
        , url: webMethod
        , contentType: "application/json; charset=utf-8"
        , dataType: "json"
        , data: "{data:'" + JSON.stringify(data).replace(/'/g, "\\'\\'") + "'}"
        , success: function (response) {
            _tmp = response.d
        }
        , error: function (xhr, status, msg) {
            var error = eval("(" + xhr.responseText + ")");
            console.log(error.Message);
            _tmp = null
        }
    });
    return _tmp;
}

function ajaxPost(webMethod, data, fxSuccess, isStringifyData, isAsync) {
    loader_show();

    var result;
    if (!isAsync) { isAsync = false; }
    if (typeof fxSuccess === 'undefined' || fxSuccess == null) {
        isAsync = false;
        fxSuccess = function (response) {
            result = response.d;
        }
    }
    if (isStringifyData === true) {
        data = "{'data':'" + JSON.stringify(data).replace(/'/g, "\\'").replace(/"/g, '\\"') + "'}";
    } else if (isStringifyData === 'obj') {
        data = "{'data':" + JSON.stringify(data).replace(/'/g, "\\'") + "}";
    }
    var result2 = $.ajax({
        async: isAsync
        , type: "POST"
        , url: webMethod
        , contentType: "application/json; charset=utf-8"
        , dataType: "json"
        , data: data
        , success: fxSuccess,
        error: function (xhr, status, msg) {
            var error = eval("(" + xhr.responseText + ")");
            console.log(error.Message);
            result = null;
        }
    });

    return isAsync ? result2 : result;
}
function ajaxPostAsync(webMethod, data, fxSuccess, isStringifyData) {
    loader_show();

    var result;
    if (!fxSuccess) {
        fxSuccess = function (res) { }
    }
    if (isStringifyData === true) {
        data = "{data:'" + JSON.stringify(data).replace(/'/g, "\\'\\'") + "'}";
    }
    return $.ajax({
        async: true
        , type: "POST"
        , url: webMethod
        , contentType: "application/json; charset=utf-8"
        , dataType: "json"
        , data: data
        , success: fxSuccess,
        error: function (xhr, status, msg) {
            var error = eval("(" + xhr.responseText + ")");
            console.log(error.Message);
        }
    });
}

function GetQueryStringParams(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1));
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0].toLowerCase() == sParam.toLowerCase()) {
            return sParameterName[1];
        }
    }
}

function FileExists(url) {
    if (url) {
        var req = new XMLHttpRequest();
        req.open('GET', url, false);
        req.send();
        return req.status == 200;
    } else {
        return false;
    }
}

function DateFormat(cvtValue) {
    var date = "";
    if (typeof (cvtValue) === "undefined" || cvtValue == null) {
        date = "-";
    }
    else {
        var dateString = cvtValue.substr(6);
        var currentTime = new Date(parseInt(dateString));
        var month = currentTime.getMonth() + 1;
        var day = currentTime.getDate();
        var year = currentTime.getFullYear();
        var date = day + "/" + month + "/" + year;
    }
    return date;
}

function DateTimeFormat(cvtValue) {
    var date = "";
    if (typeof (cvtValue) === "undefined" || cvtValue == null) {
        date = "-";
    }
    else {
        var dateString = cvtValue.substr(6);
        var currentTime = new Date(parseInt(dateString));
        var day = currentTime.getDate();
        var month = currentTime.getMonth() + 1;
        var year = currentTime.getFullYear();
        var hour = currentTime.getHours();
        var minute = currentTime.getMinutes();
        var second = currentTime.getSeconds();
        // var date = day + "/" + month + "/" + year + " " + (('' + hour).length < 2 ? '0' : '') + hour + ":" + (('' + minute).length < 2 ? '0' : '') + minute + ":" + (('' + second).length < 2 ? '0' : '') + second;
        var date = day + "/" + month + "/" + year + " " + (('' + hour).length < 2 ? '0' : '') + hour + ":" + (('' + minute).length < 2 ? '0' : '') + minute;
    }
    return date;
}

function DayFormat(cvtValue) {
    var dateString = cvtValue.substr(6);
    var currentTime = new Date(parseInt(dateString));
    var day = currentTime.getDate();
    return day;
}

function MonthFormat(cvtValue) {
    var dateString = cvtValue.substr(6);
    var currentTime = new Date(parseInt(dateString));
    var month = currentTime.getMonth() + 1;
    return month;
}

function YearFormat(cvtValue) {
    var dateString = cvtValue.substr(6);
    var currentTime = new Date(parseInt(dateString));
    var year = currentTime.getFullYear();
    return year;
}

function DateTimeNow() {
    var d = new Date();
    var month = d.getMonth() + 1;
    var day = d.getDate();
    var hour = d.getHours();
    var minute = d.getMinutes();
    var second = d.getSeconds();
    var output =
    (('' + day).length < 2 ? '0' : '') + day + '/' +
    (('' + month).length < 2 ? '0' : '') + month + '/' +
    d.getFullYear() + ' ' +
    (('' + hour).length < 2 ? '0' : '') + hour + ':' +
    (('' + minute).length < 2 ? '0' : '') + minute + ':' +
    (('' + second).length < 2 ? '0' : '') + second;
    return output;
}

function AgeCalculation(birthday) {
    var result = {};

    var from = birthday.split(/\/|-/g);
    var cal = new Date(from[2], from[1] - 1, from[0]);
    var cur = new Date();

    var curday = cur.getDate();
    var curmon = cur.getMonth();
    var curyear = cur.getFullYear();

    var calday = cal.getDate();
    var calmon = cal.getMonth();
    var calyear = cal.getFullYear();

    if (parseFloat(calyear) > parseFloat(curyear)) {
        alert("Enter Your date of birth year less than current year");
    }
    else if (parseFloat(calyear) == parseFloat(curyear) && parseFloat(calmon) > parseFloat(curmon)) {
        alert("Enter Your date of birth month less than current month");
    }
    else if (parseFloat(calyear) == parseFloat(curyear) && parseFloat(calmon) == parseFloat(curmon) && parseFloat(calday) > parseFloat(curday)) {
        alert("Enter Your date of birth date less than current date");
    }
    else {
        var curd = new Date(curyear, curmon - 1, curday);
        var cald = new Date(calyear, calmon - 1, calday);

        if (cald.getMonth() != (calmon - 1)) {
            alert("Invalid Date");
        }
        else if (curd.getMonth() != (curmon - 1)) {
            alert("Invalid Date");
        }
        else {
            var diff = Date.UTC(curyear, curmon - 1, curday, 0, 0, 0) - Date.UTC(calyear, calmon - 1, calday, 0, 0, 0);
            var dife = Datediff(cald, curd);
            var days = dife.days;
            var months = dife.months;
            var years = dife.years;

            var secleft = diff / 1000 / 60;     //minutes since your birth - Approximate
            var hrsleft = secleft / 60;         //hours since your birth - Approximate
            var daysleft = hrsleft / 24;        //days since your birth

            var as = parseInt(calyear) + dife.years + 1;
            var diff = Date.UTC(as, calmon - 1, calday, 0, 0, 0) - Date.UTC(curyear, curmon - 1, curday, 0, 0, 0);
            var datee = diff / 1000 / 60 / 60 / 24; //days left for your next birthday

            result = {
                days: days,
                months: months,
                years: years,
                secleft: secleft,
                hrsleft: hrsleft,
                daysleft: daysleft,
                datee: datee
            };
        }
    }

    return result;
}

function Datediff(dateFrom, dateTo) {
    var from = {
        d: dateFrom.getDate(),
        m: dateFrom.getMonth(),
        y: dateFrom.getFullYear()
    };

    var to = {
        d: dateTo.getDate(),
        m: dateTo.getMonth(),
        y: dateTo.getFullYear()
    };

    var daysFebruary = to.y % 4 != 0 || (to.y % 100 == 0 && to.y % 400 != 0) ? 28 : 29;
    var daysInMonths = [0, 31, daysFebruary, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    if (to.d < from.d) {
        to.d += daysInMonths[parseInt(to.m)];
        from.m += 1;
    }
    if (to.m < from.m) {
        to.m += 12;
        from.y += 1;
    }

    return {
        days: to.d - from.d,
        months: to.m - from.m,
        years: to.y - from.y
    };
}

function MergeTableCells(table, column) {
    var dimension_cells = new Array();
    var dimension_col = column + 1;

    var i = 1;
    $(table).find('th').each(function () {
        i++;
    });
    var first_instance = null;
    var rowspan = 1;
    $(table).find('tbody > tr').each(function () {
        var dimension_td = $(this).find('td:eq(' + column + '):nth-child(' + dimension_col + ')');
        if (first_instance == null) {
            first_instance = dimension_td;
        } else if (dimension_td.text() == first_instance.text()) {
            dimension_td.remove();
            ++rowspan;
            first_instance.attr('rowspan', rowspan);
        } else {
            first_instance = dimension_td;
            rowspan = 1;
        }
    });
}

function ScrollToElement(elem) {
    $('html, body').animate({ scrollTop: elem.offset().top - 40 }, 1200);
}

function UniqueList(data) {
    var UniqueList = [];
    $.each(data, function (i, el) {
        if ($.inArray(el, UniqueList) === -1) UniqueList.push(el);
    });
    return UniqueList.sort();
}

function FilterFloat(value) {
    if (/^\-?([0-9]+(\.[0-9]+)?|Infinity)$/
      .test(value))
        return Number(value);
    return NaN;
}

function AddCommas(elem) {
    var newValue = elem.val().replace(/,/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    elem.val(newValue);
}

function RemoveCommas(elem) {
    var newValue = elem.val().replace(/,/g, '');
    elem.val(newValue);
}

function AddCommasToFloat(elem) {
    var newValue = elem.val().replace(/,/g, '');
    if (val.indexOf('.') != -1) {
        var valBeforeFloatPoint = GetValueBeforeFloatPoint(val);
        var valAfterFloatPoint = GetValueAfterFloatPoint(val);
        newValue = valBeforeFloatPoint.replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '.' + valAfterFloatPoint;
    }
    else {
        newValue = val.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    elem.val(newValue);
}

function GetValueBeforeFloatPoint(text) {
    return text.split(".")[0];
}

function GetValueAfterFloatPoint(text) {
    return text.split(".")[1];
}

function UrlParam(name) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1));
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0].toLowerCase() == name.toLowerCase()) {
            return sParameterName[1];
        }
    }
}

function ValidateColorRGB(text) {
    var data = $.trim(text);
    var regex = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/;

    return regex.test(data);
}

function ValidateColorHex(text) {
    var data = $.trim(text);
    var regex = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/;

    return regex.test(data);
}

function ValidateColorHexaDecimal(text) {
    var data = $.trim(text);
    var regex = /(#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?)/gm;

    return regex.test(data);
}

function ValidateDomain(text, type) {
    var data = $.trim(text);
    var regex = /\S+/; // non-empty
    switch (type) {
        case "http": // match domain name (with HTTP)
            regex = /(.*?)[^w{3}\.]([a-zA-Z0-9]([a-zA-Z0-9\-]{0,65}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}/igm;
        case "www": // match domain name (www. only)
            regex = /[^w{3}\.]([a-zA-Z0-9]([a-zA-Z0-9\-]{0,65}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}/igm;
        case "alternative": // match domain name (alternative)
            regex = /(.*?)\.(com|net|org|info|coop|int|com\.au|co\.uk|org\.uk|ac\.uk|)/igm;
        case "sub": // match sub domains: www, dev, int, stage, int.travel, stage.travel
            regex = /(http:\/\/|https:\/\/)?(www\.|dev\.)?(int\.|stage\.)?(travel\.)?(.*)+?/igm;
    }

    return regex.test(text);
}

function ValidateEmpty(text) {
    var data = $.trim(text);
    var rex = /\S+/;

    return regex.test(data);
}

function ValidateEmail(text) {
    var data = $.trim(text);
    var regex = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;

    return regex.test(data);
}

function ValidateIDCard(text) {
    var data = $.trim(text);
    if (data.length != 13) {
        return false;
    }
    else {
        for (i = 0, sum = 0; i < 12; i++) {
            sum += parseFloat(id.charAt(i)) * (13 - i);
        }
        if ((11 - sum % 11) % 10 != parseFloat(id.charAt(12))) {
            return false;
        }
        else {
            return true;
        }
    }
}

function ValidateImages(text) {
    var data = $.trim(text);
    var regex = /([^\s]+(?=\.(jpg|gif|png))\.\2)/gm;

    return regex.test(data);
}

function ValidateLength(text, minLength, maxLength) {
    var data = $.trim(text).length;
    return ((data >= minLength) && (data <= maxLength)) ? true : false;
}

function ValidateMobile(text) {
    var data = $.trim(text);
    var regex = /^(08|09)[0-9]{8}$/;
    return regex.test(data);
}

function ValidateVehicleNumber(text) {
    var data = $.trim(text);
    var regex = (/^[1-9]{1}[ก-ฮ]{2}(([1-9]{1}[0-9]{0,3})|([1-9]{1}[0-9]{0,3})|( {1}[1-9]{1}[0-9]{0,3}))$/) | (/^[ก-ฮ]{2}(([1-9]{1}[0-9]{0,3})|([1-9]{1}[0-9]{0,3})|( {1}[1-9]{1}[0-9]{0,3}))$/);
    return regex.test(data);
}

function AllowKeyNum(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!(key == 8                     // backspace
        || key == 9                     // tab
        || key == 46                    // delete
        || (key >= 48 && key < 58)      // numbers on keyboard
        || (key >= 96 && key <= 105)    // number on keypad
        || (key >= 35 && key <= 40)     // arrow/home/end
        || key == undefined))
        event.preventDefault();
}

function AllowKeyEn(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!((key > 64 && key < 91) || (key > 96 && key < 123) || key == 32 || key == 8 || key == 9 || key == 46 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined))
        event.preventDefault();
}

function AllowKeyEnAndNum(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!(((key > 64 && key < 91) || (key > 96 && key < 123)) || (key > 47 && key < 58) || key == 45 || key == 46 || key == 64 || key == 95 || key == 32 || key == 8 || key == 9 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined))
        event.preventDefault();
}

function AllowKeyEnAndNumAndSing(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!(((key > 64 && key < 91) || (key > 96 && key < 123)) || (key > 47 && key < 58) || key == 45 || key == 46 || key == 47 || key == 64 || key == 95 || key == 32 || key == 8 || key == 9 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined))
        event.preventDefault();
}

function AllowKeyTh(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!((key >= 3585) || (key == 32) || key == 8 || key == 9 || key == 0 || key == undefined))
        event.preventDefault();
}

function AllowKeyThAndNum(elem, event) {
    if (!event) var event = window.event;
    var key = event.keyCode ? event.keyCode : event.which;

    if (!((key >= 3585) || (key == 32) || (key >= 48 && key < 58) || (key == 32) || key == 8 || key == 9 || key == 0 || key == undefined))
        event.preventDefault();
}

function AllowInt(elem, event) {
    var val = elem.value.replace(/[^\d].+/, "");
    if ((event.which != 45)
            && (event.which < 48 || event.which > 57)
            && (event.ctrlKey != true && event.which != 99)
            && (event.ctrlKey != true && event.which != 118)
            && (event.ctrlKey != true && event.which != 120)) {
        if (($.inArray(event.keyCode, [46, 8, 9, 27, 13]) !== -1
            || (event.keyCode >= 35 && event.keyCode <= 39)) != true) {
            event.preventDefault();
        }
    }
    else {
        if (event.which == 45 && elem.value.length != 0) {
            event.preventDefault();
        }
    }
}

function AllowDecimal(elem, event) {
    var val = elem.value.replace(/^\s*(\+|-)?[^0-9]/g, "");
    if (((event.which != 45 && event.which != 46) || val.indexOf('.') != -1)
        && (event.which < 48 || event.which > 57)
        && (event.ctrlKey != true && event.which != 99)
        && (event.ctrlKey != true && event.which != 118)
        && (event.ctrlKey != true && event.which != 120)) {
        if (($.inArray(event.keyCode, [46, 8, 9, 27, 13]) !== -1 || (event.keyCode >= 35 && event.keyCode <= 39)) != true) {
            event.preventDefault();
        }
    }
    else {
        if (event.which == 45 && elem.value.length != 0) {
            event.preventDefault();
        }
        if (val.indexOf('.') != -1 && GetValueAfterDecimalPoint(val).length > 1) {
            event.preventDefault();
        }
    }
}

var validation = {}

validation.updateTips = function (validate_tips, msg) {
    validate_tips.text(msg);
    validate_tips.addClass('ui-state-highlight');
    setTimeout(function () {
        validate_tips.removeClass("ui-state-highlight", 1500);
    }, 1000);
}

validation.checkRequired = function (o, validate_result_msg, validate_tip_id) {
    if (o.val().replace(/\s/g, '').length < 1) {
        // validation.updateTips(validate_tip_id, validate_result_msg);
        $('html, body').animate({ scrollTop: o.offset().top - 150 }, 1000);
        o.css({ 'background-color': '#fafad2', 'border': 'solid 1px #ffa500' }).focus();
        return false;
    } else {
        // validation.updateTips(validate_tip_id, "");
        o.css({ 'background-color': '#FFFFFF', 'border': 'solid 1px #ccc' });
        return true;
    }
}

validation.checkRequiredNumber = function (o, validate_result_msg, validate_tip_id) {
    if (o.val().replace(/\s/g, '').length < 1 || o.val() == "0") {
        // validation.updateTips(validate_tip_id, validate_result_msg);
        $('html, body').animate({ scrollTop: o.offset().top - 150 }, 1000);
        o.css({ 'background-color': '#fafad2', 'border': 'solid 1px #ffa500' });
        return false;
    } else {
        // validation.updateTips(validate_tip_id, "");
        o.css({ 'background-color': '#FFFFFF', 'border': 'solid 1px #ccc' });
        return true;
    }
}

validation.checkRequiredRD = function (o, validate_result_msg, validate_tip_id) {
    if (validate_result_msg == undefined || validate_result_msg == "" || validate_result_msg == null) {
        // validation.updateTips(validate_tip_id, validate_result_msg);
        o.css('background-color', '#fafad2')
        $('html, body').animate({ scrollTop: o.offset().top - 150 }, 1000);
        return false;
    } else {
        o.css('background-color', '#FFFFFF');
        //  o.css('border', 'solid 1px #9fadc7');
        return true;
    }
}

validation.checkRequiredSelect = function (o, validate_result_msg, x) {
    if (o == '' || o == "0" || o == "99" || o == "99999" || o == "เลือก") {
        // validation.updateTips(validate_tip_id, validate_result_msg);
        x.css('background-color', '#fafad2')
        $('html, body').animate({ scrollTop: x.offset().top - 150 }, 1000);

        // x.css('border', 'solid 1px #ff9999').focus();

        //     $(".ui-combobox-input").css('border', 'solid 1px #ff9999').animate({ scrollTop: o.offset().top }, 360);
        return false;
    } else {
        x.css('background-color', '#FFFFFF');
        // x.css('border', 'solid 1px #9fadc7');
        return true;
    }
}

function checkIDCard(id, o) {
    if (id.length != 13) {
        o.css({ 'background-color': '#fafad2', 'border': 'solid 1px #ffa500' }).focus();
        $('html, body').animate({ scrollTop: o.offset().top - 40 }, 360);
        //o.css('border', 'solid 1px #ff9999').focus();
        return (false);
    }
    else {
        for (i = 0, sum = 0; i < 12; i++) {
            sum += parseFloat(id.charAt(i)) * (13 - i);
        }

        if ((11 - sum % 11) % 10 != parseFloat(id.charAt(12))) {
            // o.css('border', 'solid 1px #ff9999').focus();
            o.css({ 'background-color': '#fafad2', 'border': 'solid 1px #ffa500' }).focus();
            $('html, body').animate({ scrollTop: o.offset().top - 40 }, 360);
            return (false);
        }
        else {
            o.css('background-color', 'solid 1px #FFFFFF');
            // o.css('border', 'solid 1px #9fadc7');
            return (true);
        }
    }
}

function checkCreditCard(id, o) {
    if (id.length != 16) {
        o.css({ 'background-color': '#fafad2', 'border': 'solid 1px #ffa500' }).focus();
        $('html, body').animate({ scrollTop: o.offset().top - 40 }, 360);
        //o.css('border', 'solid 1px #ff9999').focus();
        return (false);
    }
    else {
        o.css('background-color', 'solid 1px #FFFFFF');
        // o.css('border', 'solid 1px #9fadc7');
        return (true);
    }
}

function remcomma(num) {
    num = num.toString().replace(/\$|\,/g, '');
    if (isNaN(num) || num == "") {
        num = "0";
    }
    return (num);
}

function incommaJ(value) {
    var num;
    value = remcomma(value);
    num = parseInt(value).toFixed(0).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");

    if (num == 0) {
        num = "";
    }
    return (num);
}

function incommaJFloat(value) {
    var num;
    value = remcomma(value);
    num = parseFloat(value).toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");

    if (num == 0) {
        num = "";
    }
    return (num);
}

function CheckDataInt(_val) {
    if (_val == "") {
        _val = 0;
    }
    return _val;
}

function AddParameter(form, name, value) {
    var $input = $("<input />").attr("type", "hidden")
                                .attr("name", name)
                                .attr("value", value);
    form.append($input);
}

function addCommas(NumberStr) {
    NumberStr += '';
    NumberData = NumberStr.split('.');
    Number1 = NumberData[0];
    Number2 = NumberData.length > 1 ? '.' + NumberData[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(Number1)) {
        Number1 = Number1.replace(rgx, '$1' + ',' + '$2');
    }
    return Number1 + Number2;
}

//#region key_event
function num_key(e) {
    if (!e) var e = window.event;
    var key = e.keyCode ? e.keyCode : e.which;

    if (key >= 48 && key < 58 || key == 8 || key == 9 || key == 0 || key == undefined) {
        return (true);
    }
    else {
        return (false);
    }
}

function en_key(e, o) {
    if (!e) var e = window.event;
    var key = e.keyCode ? e.keyCode : e.which;

    if ((key > 64 && key < 91) || (key > 96 && key < 123) || key == 32 || key == 8 || key == 9 || key == 46 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined) {
        $('span.change-lang ').remove(); return (true);
    }
    else {
        $('span.change-lang ').remove(); $('#' + o).after("<span class='change-lang '>กรุณากรอกภาษาอังกฤษ</span"); return (false);
    }
}

function en_num_key(e) {
    if (!e) var e = window.event;
    var key = e.keyCode ? e.keyCode : e.which;

    if (((key > 64 && key < 91) || (key > 96 && key < 123)) || (key > 47 && key < 58) || key == 45 || key == 46 || key == 64 || key == 95 || key == 32 || key == 8 || key == 9 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined) {
        return (true);
    }
    else {
        return (false);
    }
}

function en_num_sign_key(e) {
    if (!e) var e = window.event;
    var key = e.keyCode ? e.keyCode : e.which;
    if (((key > 64 && key < 91) || (key > 96 && key < 123)) || (key > 47 && key < 58) || key == 45 || key == 46 || key == 47 || key == 64 || key == 95 || key == 32 || key == 8 || key == 9 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined) {
        return (true);
    }
    else {
        return (false);
    }
}

function email_key(e) {
    if (!e) var e = window.event;
    var key = e.keyCode ? e.keyCode : e.which;

    if (((key > 64 && key < 91) || (key > 96 && key < 123)) || (key > 47 && key < 58) || key == 64 || key == 95 || key == 13 || key == 45 || key == 46 || key == 8 || key == 9 || (key >= 35 && key <= 40) || (key >= 112 && key <= 123) || key == 3653 || key == undefined) {
        return (true);
    }
    else {
        return (false);
    }
}

function th_key(e, o) {
    if (!e) var e = windows.event;

    var key = e.keyCode ? e.keyCode : e.which;
    if ((key >= 3585) || (key == 32) || key == 8 || key == 9 || key == 0 || key == undefined)
    { $('span.change-lang ').remove(); return true; }
    else
    { $('span.change-lang ').remove(); $('#' + o).after("<span class='change-lang '>กรุณากรอกภาษาไทย</span"); return false; }
}

function num_key_and_th_key(e, o) {
    if (!e) var e = windows.event;

    var key = e.keyCode ? e.keyCode : e.which;
    if ((key >= 3585) || (key == 32) || (key >= 48 && key < 58) || (key == 32) || key == 8 || key == 9 || key == 0 || key == undefined)
    { $('span.change-lang ').remove(); return true; }
    else
    { $('span.change-lang ').remove(); $('#' + o).after("<span class='change-lang '>กรุณากรอกภาษาไทย</span"); return false; }
}
//#endregion key_event

function chkNullOrEmptyToDash(_val) {
    if (_val == null || _val == "") {
        _val = "-";
    }
    return _val;
}

function chkNullOrEmptyToZero(_val) {
    if (_val == null || _val == "") {
        _val = 0;
    }
    return _val;
}

function chkNullToEmpty(_val) {
    if (_val == null) {
        _val = "";
    }
    return _val;
}

function GetQueryStringParams(sParam) {
    try {
        var sPageURL = window.location.search.substring(1);
        var sURLVariables = sPageURL.split('&');
        for (var i = 0; i < sURLVariables.length; i++) {
            var sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] == sParam) {
                return typeof sParameterName[1] !== "undefined" ? sParameterName[1] : "";
            }
        }
    }
    catch (err) { }
} 

function convert_month_th(month) {
    var month_th = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฏาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
    return month_th[month];
}

function urlParamsVars(name) {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

//แปลรูปฟอร์แมทเงิน
function formatCurrency(total) {
    var neg = false;
    if (total < 0) {
        neg = true;
        total = Math.abs(total);
    }
    var result = parseFloat(total, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString();
    return result;
}